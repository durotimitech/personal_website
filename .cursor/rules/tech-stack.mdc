---
description: 
globs: 
alwaysApply: true
---
# Rule: Use Next.js, TypeScript, TailwindCSS, Framer Motion, and Accessibility Best Practices

## Match
.*

## Technology
- Use **Next.js** as the frontend framework with the **App Router** (not Pages Router).
- All pages and components should be structured using the **`app/` directory** format.

## Language
- Use **TypeScript** across the entire project. No JavaScript files should be used.

## Styling
- Use **TailwindCSS** exclusively for styling.
- Do not use plain CSS files, CSS modules, or styled-components.

## Animation
- Use **Framer Motion** for all animations and transitions.
- Avoid using CSS transition classes or vanilla JavaScript animations.

## Project Structure
- Organize components under a `components/` directory with a clear naming convention.
- Keep logic modular and reusable.
- Prefer server components when possible unless interactivity requires client components.

## Accessibility (a11y)
- Follow **WCAG 2.1 AA** accessibility standards.
- Use **semantic HTML elements**: `<button>`, `<nav>`, `<header>`, `<main>`, etc.
- Ensure **text has sufficient contrast** against background colors.
- All interactive elements must be **keyboard accessible** (e.g. buttons, links, modals).
- Use `aria-label`, `aria-hidden`, `role`, and similar attributes where appropriate.
- Provide **focus outlines** for all keyboard-navigable elements.
- Include **`alt` text** for all images and `aria-label` for icons.
- Avoid using animation that could trigger motion sensitivity; use `prefers-reduced-motion` when applying animations.
- Use tools like **eslint-plugin-jsx-a11y** to enforce accessibility rules during development.

## Notes
- You can optionally add `shadcn/ui` for ready-made components styled with Tailwind.
- For forms or animations, `react-hook-form` and `zod` may also be used.
